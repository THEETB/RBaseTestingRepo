name: rbasecheck

on:
   # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  # schedule:
    # The shortest interval you can run scheduled workflows is once every 5 minutes.
    # Note: The schedule event can be delayed during periods of high loads of GitHub Actions workflow runs. 
    # High load times include the start of every hour. 
    # To decrease the chance of delay, schedule your workflow to run at a different time of the hour.
    # Every 5 minutes.
    # - cron: '*/1 * * * *'
    # At the beginning of every day.
    # - cron: "0 0 * * 0"

# on: [push]

jobs:
  report:
    runs-on: ubuntu-latest
    env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Setting up Python
        uses: actions/setup-python@v3
        with:
         python-version: '3.9'

      - name: Setting the python library
        run: |
         pip install pyyaml requests

            
      - name: Check out repository code
        # https://github.com/actions/checkout/tree/v3.0.2
        uses: actions/checkout@v3
        with:
         persist-credentials: false
        
      - name: Check for latest R release
        shell: python
        run: |
           import requests
           import json
           import os

           resp = requests.get("https://cran.rstudio.com/src/base/VERSION-INFO.dcf").content
           bytes = resp.decode().replace("'", '"').split("\n")
           json_en = json.loads(json.dumps({v.split(":")[0]:v.split(":")[1] for v in bytes if v != ""}))
           latestR = json_en['Release']
           with open(os.environ['GITHUB_ENV'], "a") as f:
              print(f'latest_R={latestR}', file=f)

      - name: Test with environment variables
        id: date
        run: echo "date=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
        
      - name: Modify Input file if version change is detected
        id: parsing_file 
        run: |
            import sys
            import yaml
            import os
            from collections import OrderedDict
            
            latestR = "${{ env.latest_R }}"
            currentR = "${{ vars.R_CURRENTVERSION }}"
            layertag = ""
            yaml_dump = ""
            outputFileName = 'inputs/input.yaml'
            reserved_word = ["build-required", "RVersion", "layerName", "baselzayername", "baselayertag", "buildlayername", "buildlayertag", "DockerfileType", "ToolName", "ToolVersion", "VariableName", "VariableValue"]
            layernames = ["ros", "rdep", "rbase", "rstudio"]
            def checkFile(file):
               filerepo = "${{ github.workspace }}"
               filename = os.path.join(filerepo, "/../../", file)
               if os.path.isfile(filename):
                  print(f"file '{filename}' exists...")
                  return True;
               else:
                  print(f"file '{filename}' doesn't exists...")
                  return False;

            def changeFileName(filenames, Rversion):
               print(filenames, Rversion)
               filename, extension = filenames.split('.')
               filenames = filename.split(' ')[0]
               return ''.join([filenames, '_', Rversion.split(' ')[1], '.', extension])
            
            def create_sublayer(layername, data, layertag, baseosname, baseostag):
               if layername == "ros" or layername == "rdep":
                  data["Baselayername"], data["Baselayertag"], data["Build_layer_name"] = baseosname, baseostag, "ros"
                  currentlayertag = "-".join(layertag.split("-")[:2])+"-"+"${{ env.date }}"
                  buildRequired = "${{ vars.Build_required }}"
                  dockerfiletype = "${{ vars.DockerfileType }}"
                  if buildRequired.lower() != "no" or buildRequired.lower() != "false":
                     data["build-required"] = "false"
                  if dockerfiletype.lower() != "custom":
                     data["build-required"] = dockerfiletype.lower()
                  elif dockerfiletype.lower() == "custom":
                     data["build-required"] = dockerfiletype.lower()
                  else:
                     print("Error: Please provide correct filename")
                     exit()
               # elif layername == "rbase":
               #    data["Base"]
               return data
                                    
            def preprocessing(filename):
                updatedDict = dict()
                with open('./inputs/RBaseTemplate.yaml', 'r') as fp:
                   yamlObj = yaml.safe_load_all(fp)
                   for k, v in enumerate(yamlObj):
                      if v != None:
                         print("v: ", v)
                         for key, val in v.items():
                            if key == "workflow-name":
                               v[key] = v[key].replace("{RVersion}", latestR.split(" ")[1])
                               layertag = v[key]
                            elif key == "layerName" and key in reserved_word:
                               print("Val", v)
                               tempDict = dict()
                               for layer in layernames:
                                  if layertag != "":
                                     if layer == "ros":
                                        baseosname, baseostag = "${{ vars.Baseosname }}", "${{ vars.Baseostag }}"
                                     # elif layer == "rdep":
                                     #    print(v["ros"])
                                     tempDict[layer] = create_sublayer(layer, val, layertag, baseosname, baseostag)
                                     print(tempDict[layer])
                            # if key != "workflow-name" and 'Env' in val.keys():
                            #    val['Env']['R'] = latestR.split(" ")[1]
                            # if key != "workflow-name" and 'Build_layer_tag' in val.keys():
                            #    val['Build_layer_tag'] = latestR.split(" ")[1]
                            updatedDict[key] = val

                fp.close()
                print(updatedDict)
                # with open("${{ github.workspace }}/"+newfilename, 'w') as fp:
                #    yaml_data = yaml.dump(updatedDict, fp, sort_keys=False, default_flow_style=False)
                # fp.close() 
            
            if latestR != currentR:
             isfile = checkFile(outputFileName)
             if not isfile:
                newfilename = changeFileName(outputFileName, latestR)
             else:
                newfilename = outputFileName
             updatedDict = dict()
             preprocessedFile = preprocessing(newfilename)
        shell: python
        
      - name: Committing new file Created for RBase
        if: ${{ steps.parsing_file.outcome == 'success' }}
        id: commit_files
        run: |
            git config --global user.name "theetb"
            git config --global user.email "balasubramaniam.theetharappan@pfizer.com"
            git add -A
            git commit -m "Created a new file"+newfilename
            
      - name: Pushing File
        if: ${{ steps.commit_files.outcome == 'success' }}
        uses: ad-m/github-push-action@master
        with:
         github_token: ${{ secrets.PAT }}
      #    yaml_dump = ""
      #    reserved_word = ["build-required"]
         
      #    def converter(data):
      #        yaml_data = dict()
      #        vs = dict()
      #        headers = 0
      #        key, sub_key = "", ""
      #        for val in data[:-1]:
      #            if val.split(":")[1] != "" and headers == 0:
      #                yaml_data[val.split(":")[0]] = val.split(":")[1]
      #            else:
      #                if headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
      #                    yaml_data[key] = vs[key]
      #                    vs = dict()
      #                    headers = 0
      #                if headers == 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
      #                    headers += 1
      #                    key = val.split(":")[0]
      #                    vs[key] = dict()
      #                elif headers != 0 and (val.split(":")[1] != ""):
      #                    vs[key][val.split(":")[0]] = val.split(":")[1]
      #                elif headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].isupper()):
      #                    vs[key][val.split(":")[0]] = val.split(":")[1]
      #        yaml_data[key] = vs[key]
      #        return yaml_data
         
      #    if latestR != currentR:
      #     with open('./inputs/input1.yaml') as fp:
      #         for lines in fp:
      #             yaml_dump+=lines.strip()+'\n'
      #     fp.close()
      #     yaml_val = converter(yaml_dump.split("\n"))
      #     yaml_val['rbase']['r'] = currentR

      #     print(yaml_val)  
      #     with open('./inputs/input1.yaml', 'w+') as f:
      #        yaml.dump(yaml_val, f)

      # - name: checking the update part
      #   run: |
      #      gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/OWNER/REPO/actions/variables/R_CURRENTVERSION
     # http(s)://github.com/api/v3/repos/THEETB/RBaseTestingRepo/actions/variables/R_CURRENTVERSION \
     # -d '{"name":"R_CURRENTVERSION","value":${{ env.latest_R }}}'
             
      # - name: Commit chnages 
      #   if: ${{ env.R_CURRENT != env.latest_R }}
      #   run: |
      #     git config --global user.name "theetb"
      #     git config --global user.email "balasubramaniam.theetharappan@pfizer.com"
      #     now=$(date)
      #     git add -A
      #     git commit -m "Update R Version to ${{ env.latest_R }}"       
      
      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #    github_token: ${{ secrets.PAT }}

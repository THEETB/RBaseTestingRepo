name: rbasecheck

on:
   # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  # schedule:
    # The shortest interval you can run scheduled workflows is once every 5 minutes.
    # Note: The schedule event can be delayed during periods of high loads of GitHub Actions workflow runs. 
    # High load times include the start of every hour. 
    # To decrease the chance of delay, schedule your workflow to run at a different time of the hour.
    # Every 5 minutes.
    # - cron: '*/1 * * * *'
    # At the beginning of every day.
    # - cron: "0 0 * * 0"

# on: [push]

jobs:
  report:
    runs-on: ubuntu-latest
    steps:

      - name: Setting up Python
        uses: actions/setup-python@v3
        with:
         python-version: '3.9'

      - name: Setting the python library
        run: |
         pip install pyyaml

            
      - name: Check out repository code
        # https://github.com/actions/checkout/tree/v3.0.2
        uses: actions/checkout@v3
        with:
         persist-credentials: false
        
      - name: Check for latest R release
        run: |
           latest_R=`curl -v --silent https://cran.rstudio.com/src/base/VERSION-INFO.dcf 2>&1 | grep Release | awk {'print $2'}`
           echo "latest_R=$latest_R" >> $GITHUB_ENV
                      
      - name: Modify Input file if version change is detected
        shell: python 
        run: | 
         import sys
         
         latestR = "R-4.3.1"
         currentR = "R-4.2.1"
         yaml_dump = ""
         reserved_word = ["build-required"]
         
         def converter(data):
             yaml_data = dict()
             vs = dict()
             headers = 0
             key, sub_key = "", ""
             for val in data[:-1]:
                 if val.split(":")[1] != "" and headers == 0:
                     yaml_data[val.split(":")[0]] = val.split(":")[1]
                 else:
                     if headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
                         yaml_data[key] = vs[key]
                         vs = dict()
                         headers = 0
                     if headers == 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
                         headers += 1
                         key = val.split(":")[0]
                         vs[key] = dict()
                     elif headers != 0 and (val.split(":")[1] != ""):
                         vs[key][val.split(":")[0]] = val.split(":")[1]
                     elif headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].isupper()):
                         vs[key][val.split(":")[0]] = val.split(":")[1]
             yaml_data[key] = vs[key]
             return yaml_data
         
         if latestR != currentR:
          with open('./inputs/input1.yaml') as fp:
              for lines in fp:
                  yaml_dump+=lines.strip()+'\n'
          yaml_val = converter(yaml_dump.split("\n"))
          print(yaml_val['rbase']['r'])
      # - name: Commit chnages 
      #   if: ${{ env.R_CURRENT != env.latest_R }}
      #   run: |
      #     git config --global user.name "kempas01"
      #     git config --global user.email "srinath.kempanna@pfizer.com"
      #     now=$(date)
      #     git add -A
      #     git commit -m "Update R Version to ${{ env.latest_R }}"       
      
      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #    github_token: ${{ secrets.PAT }}

name: rbasecheck
on:
   # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  # schedule:
    # The shortest interval you can run scheduled workflows is once every 5 minutes.
    # Note: The schedule event can be delayed during periods of high loads of GitHub Actions workflow runs. 
    # High load times include the start of every hour. 
    # To decrease the chance of delay, schedule your workflow to run at a different time of the hour.
    # Every 5 minutes.
    # - cron: '*/1 * * * *'
    # At the beginning of every day.
    # - cron: "0 0 * * 0"

# on: [push]

jobs:
  report:
    runs-on: ubuntu-latest
    env:
       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:

      - name: Setting up Python
        uses: actions/setup-python@v4
        with:
         python-version: '3.9'

      - name: Setting the python library
        run: |
         pip install pyyaml requests datetime

            
      - name: Check out repository code
        # https://github.com/actions/checkout/tree/v3.0.2
        uses: actions/checkout@v4
        with:
         persist-credentials: false
         token: ${{ secrets.GIT_PAT }}

      - name: Github CLI Setup
        run: |
          sudo apt update
          sudo apt install -y gh
      
      # - name: Testing
      #   run: |
      #      environs="[{'R_VERSION': '4.4.1'}]"
      #      items=""
      #      if [ -n "$environs" ]; then
      #          IFS=', ' read -r -a array <<< "${environs:1:-1}"
      #          for item in ${environs[@]}; do
      #             items = "${item:1:-1}"
      #             echo "$items"
      #          done
      #       fi

      - name: Modify Input file if version change is detected
        id: parsing_file
        shell: python 
        run: | 
            import sys
            import yaml
            
            latestR = "${{ env.latest_R }}"            
            with open('./inputs/input1.yaml', "w") as fp:
               fp.write("Testing"+latestR)
            fp.close()

      - name: create branch
        run: |
           git config --global user.email "github-actions[bot]@users.noreply.github.com"
           git config --global user.name "Github Actions [Bot]"
           git checkout -b R-4.3.1
           git checkout main -- README.md inputs/input1.yaml
           git add .
           git commit -m "Saving changes..."
           
        # git commit -m "Testing newly created branch"
           # git push --set-upstream origin R-4.3.1

      # - name: create branch & pull request
      #   id: pullrequest
      #   uses: peter-evans/create-pull-request@v7
      #   with:
      #      token: ${{ secrets.GIT_PAT }}
      #      commit-message: New R release
      #      committer: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
      #      author: ${{ github.actor }} <${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com>
      #      signoff: false
      #      branch: R-4.3.1
      #      title: 'New R Release'
      #      body: |
      #       New R Release:
      #          - Updated with *today's* date
      #          - Auto-generated by [create-pull-request][1]
   
      #          [1]: https://github.com/THEETB/create-pull-request
      #      labels: |
      #          New R
      #          release
      #      assignees: ${{ github.actor }}
      #      reviewers: ${{ github.actor }}
      # - name: Testing the github action bot & author
      #   run: |
      #      echo github-actions[bot]@users.noreply.github.com
      #      echo ${{ github.actor }}
      # - name: Commit Changes
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GIT_PAT }}
      #   run: |
      #      git config user.email "balasubramaniam.theetharappan@pfizer.com"
      #      git config user.name "THEETB"
      #      git add .
      #      git commit -m "Pushing the changes"
      #      git remote remove origin
      #      git remote add origin https://${{ secrets.GIT_PAT }}@github.com/THEETB/RBaseTestingRepo
      #      git push --set-upstream origin main
      # - name: Check for latest R release
      #   shell: python
      #   run: |
      #      import requests
      #      import json
      #      import os

      #      resp = requests.get("https://cran.rstudio.com/src/base/VERSION-INFO.dcf").content
      #      bytes = resp.decode().replace("'", '"').split("\n")
      #      json_en = json.loads(json.dumps({v.split(":")[0]:v.split(":")[1] for v in bytes if v != ""}))
      #      latestR = json_en['Release']
      #      with open(os.environ['GITHUB_ENV'], "a") as f:
      #         print(f'latest_R={latestR}', file=f)
        
      # - name: Modify Input file if version change is detected
      #   id: parsing_file 
      #   run: |
      #       import sys
      #       import yaml
      #       import os
      #       from datetime import datetime
      #       from collections import OrderedDict
      #       import json
            
      #       latestR = "${{ env.latest_R }}"
      #       currentR = "${{ vars.R_CURRENTVERSION }}"
      #       layertag = ""
      #       yaml_dump = ""
      #       outputFileName = 'inputs/input.yaml'
      #       # reserved_word = ["build-required", "RVersion", "layerName", "baselzayername", "baselayertag", "buildlayername", "buildlayertag", "DockerfileType", "ToolName", "ToolVersion", "VariableName", "VariableValue"]
      #       layernames = ["ros", "rdep", "rbase", "rstudio"]
      #       def checkFile(file):
      #          filerepo = "${{ github.workspace }}"
      #          filename = os.path.join(filerepo, "inputs/RBaseTemplate.yaml")
      #          if os.path.isfile(filename):
      #             print(f"file '{filename}' exists...")
      #             return True;
      #          else:
      #             print(f"file '{filename}' doesn't exists...")
      #             return False;

      #       def changeFileName(filenames, Rversion):
      #          filename, extension = filenames.split('.')
      #          filenames = filename.split(' ')[0]
      #          return ''.join([filenames, '_', Rversion.split(' ')[1], '.', extension])
            
      #       def create_sublayer(layername, data, layertag, baseosname, baseostag):
      #          currentime = datetime.now()
      #          datetime_str = currentime.strftime("%H%M%S%f")
      #          currentlayertag = "-".join(layertag.split("-")[:2])
      #          data["Baselayername"], data["Baselayertag"], data["Build_layer_name"] = baseosname, baseostag, layername
      #          data["Build_layer_tag"] = currentlayertag
      #          buildRequired = "${{ vars.Build_required }}"
      #          dockerfiletype = "${{ vars.DockerfileType }}"
      #          if buildRequired.lower() == "no" or buildRequired.lower() == "false":
      #             data["build-required"] = "false"
      #          else:
      #             data["build-required"] = "true"
      #          if dockerfiletype.lower() != "custom":
      #             data["Dockerfile"] = dockerfiletype.lower()
      #          elif dockerfiletype.lower() == "custom":
      #             data["Dockerfile"] = dockerfiletype.lower()
      #          else:
      #             print("Error: Please provide correct filename")
      #             exit()
      #          if layername == "rbase" or layername == "rstudio":
      #             envDict = ${{ toJSON(vars) }}
      #             envs = {k:envDict[k] for k, v in envDict.items() if "ENV" in k}
      #             additionalDict = ${{ toJSON(vars) }}
      #             additional = {k:additionalDict[k] for k, v in additionalDict.items() if 'ADDITIONAL' in k}
      #             for k, v in envs.items():
      #                if 'Env' in data:
      #                   data['Env']["_".join(k.split("_")[1:])] = latestR.split(" ")[1]
      #             for k, v in additional.items():
      #                if 'Additional' in data:
      #                   if "VariableName" in data['Additional']:
      #                      del data["Additional"]["VariableName"]
      #                   if "ToolName" in data['Env']:
      #                      del data['Env']['ToolName']
      #                   data['Additional']["_".join(k.split("_")[1:])] = v
      #          return data
                                    
      #       def preprocessing(filename):
      #           updatedDict = dict()
      #           baseosname, baseostag = "${{ vars.Baseosname }}", "${{ vars.Baseostag }}"
      #           workflowName = ""
      #           with open('inputs/RBaseTemplate.yaml', 'r') as fp:
      #               yamlObj = yaml.safe_load_all(fp)
      #               for v in list(yamlObj):
      #                   if "workflow-name" == list(v.keys())[0]:
      #                       v["workflow-name"] = v["workflow-name"].replace("{RVersion}", latestR.split(" ")[1])
      #                       workflowName = v["workflow-name"]
      #                       layertag = "-".join(v["workflow-name"].split("-")[:2])
      #                   elif "layername" in list(v.keys())[0]:
      #                       tmp = {}
      #                       layerval = v["layername"]
      #                       if workflowName != "":
      #                          tmp["workflow-name"] = workflowName
      #                       for layer in layernames:
      #                           if layer not in tmp:
      #                               tmp[layer] = layerval
      #                       tmpDict = tmp.copy()
      #                       vls = ""
      #                       for key, vals in tmp.items():
      #                          if key != "workflow-name":
      #                              val = vals.copy()
      #                              jsonval = create_sublayer(key, val, layertag, baseosname, baseostag)
      #                              baseosname, baseostag = jsonval['Build_layer_name'], jsonval['Build_layer_tag']
      #                              tmpDict[key] = jsonval
      #                       if "ros" in tmpDict and "Env" in tmpDict["ros"]:
      #                          del tmpDict["ros"]["Env"]
      #                       if "rdep" in tmpDict and "Env" in tmpDict["rdep"]:
      #                          del tmpDict["rdep"]["Env"]
      #                       if "rbase" in tmpDict and "Additional" in tmpDict["rbase"]:
      #                          del tmpDict["rbase"]["Additional"]
      #                       if "ros" in tmpDict and "Additional" in tmpDict["ros"]:
      #                          del tmpDict["ros"]["Additional"]
      #                       if "rdep" in tmpDict and "Additional" in tmpDict["rdep"]:
      #                          del tmpDict["rdep"]["Additional"]
                        
      #           fp.close()
      #           return tmpDict
            
      #       if latestR != currentR:
      #        isfile = checkFile(outputFileName)
      #        if not isfile:
      #           newfilename = changeFileName(outputFileName, latestR)
      #        else:
      #           newfilename = outputFileName
      #        preprocessedFile = preprocessing(newfilename)
      #        print(preprocessedFile)
      #   shell: python
        
      # - name: Committing new file Created for RBase
      #   if: ${{ steps.parsing_file.outcome == 'success' }}
      #   id: commit_files
      #   run: |
      #       git config --global user.name "theetb"
      #       git config --global user.email "balasubramaniam.theetharappan@pfizer.com"
      #       git add -A
      #       git commit -m "Created a new file"+newfilename
            
      # - name: Pushing File
      #   if: ${{ steps.commit_files.outcome == 'success' }}
      #   uses: ad-m/github-push-action@master
      #   with:
      #    github_token: ${{ secrets.PAT }}
      #    yaml_dump = ""
      #    reserved_word = ["build-required"]
         
      #    def converter(data):
      #        yaml_data = dict()
      #        vs = dict()
      #        headers = 0
      #        key, sub_key = "", ""
      #        for val in data[:-1]:
      #            if val.split(":")[1] != "" and headers == 0:
      #                yaml_data[val.split(":")[0]] = val.split(":")[1]
      #            else:
      #                if headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
      #                    yaml_data[key] = vs[key]
      #                    vs = dict()
      #                    headers = 0
      #                if headers == 0 and (val.split(":")[1] == "" and val.split(":")[0][0].islower()):
      #                    headers += 1
      #                    key = val.split(":")[0]
      #                    vs[key] = dict()
      #                elif headers != 0 and (val.split(":")[1] != ""):
      #                    vs[key][val.split(":")[0]] = val.split(":")[1]
      #                elif headers != 0 and (val.split(":")[1] == "" and val.split(":")[0][0].isupper()):
      #                    vs[key][val.split(":")[0]] = val.split(":")[1]
      #        yaml_data[key] = vs[key]
      #        return yaml_data
         
      #    if latestR != currentR:
      #     with open('./inputs/input1.yaml') as fp:
      #         for lines in fp:
      #             yaml_dump+=lines.strip()+'\n'
      #     fp.close()
      #     yaml_val = converter(yaml_dump.split("\n"))
      #     yaml_val['rbase']['r'] = currentR

      #     print(yaml_val)  
      #     with open('./inputs/input1.yaml', 'w+') as f:
      #        yaml.dump(yaml_val, f)

      # - name: checking the update part
      #   run: |
      #      gh api --method GET -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/OWNER/REPO/actions/variables/R_CURRENTVERSION
     # http(s)://github.com/api/v3/repos/THEETB/RBaseTestingRepo/actions/variables/R_CURRENTVERSION \
     # -d '{"name":"R_CURRENTVERSION","value":${{ env.latest_R }}}'
             
      # - name: Commit chnages 
      #   if: ${{ env.R_CURRENT != env.latest_R }}
      #   run: |
      #     git config --global user.name "theetb"
      #     git config --global user.email "balasubramaniam.theetharappan@pfizer.com"
      #     now=$(date)
      #     git add -A
      #     git commit -m "Update R Version to ${{ env.latest_R }}"       
      
      # - name: Push changes
      #   uses: ad-m/github-push-action@master
      #   with:
      #    github_token: ${{ secrets.PAT }}
